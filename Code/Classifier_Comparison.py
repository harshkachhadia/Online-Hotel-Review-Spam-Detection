# -*- coding: utf-8 -*-
"""ALDA Classifier Comparison.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n1Wnvt8zkYKb9c7Qyc1CGjfM3svRzJ93

#Importing Libraries
"""

import numpy as np 
import pandas as pd

"""#Get Data"""

df=pd.read_csv('deceptive-opinion.csv')

"""#Initial Data Analysis Plots"""

import seaborn as sb
import matplotlib.pyplot as plt
sb.countplot(x=df['deceptive'],hue='polarity',data=df)

sb.countplot(x=df['source'],hue='deceptive',data=df)

sb.countplot(x=df['hotel'],hue='deceptive',data=df)

df['hotel'].value_counts().plot(kind='barh')

"""#Data Preprocessing - Cleaning the data"""

import nltk
nltk.download('stopwords')

from nltk.corpus import stopwords
import re
import string

stop_words = set(stopwords.words('english'))

def input_clean(text):

    #to lowercase
    text = text.lower()
    #removes text in square brackets
    text = re.sub('\[.*?\]', '', text)
    #removes non-alphanumeric characters
    text = re.sub("\\W"," ",text)
    #removes links 
    text = re.sub('https?://\S+|www\.\S+', '', text)
    #removes special characters
    text = re.sub('<.*?>+', '', text)
    #removes punctuation
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    #removes new line characters
    text = re.sub('\n', '', text)
    #removes digits
    text = re.sub('\w*\d\w*', '', text)
    #removes extra space between words
    text = text.replace("  "," ")
    #removes front or trailing spaces
    text = text.strip()
    #removes stopwords
    text = ' '.join(w for w in text.split() if w not in stop_words)
    
    return text

df['text']=df['text'].apply(input_clean)

"""#Encoding non-numeric class labels to numeric class labels"""

class_labels = df['deceptive']

from sklearn.preprocessing import LabelEncoder

encoder=LabelEncoder()
class_labels=encoder.fit_transform(class_labels)

input_data = df['text']

#Init for analysis
MNB = ['Multinomial Naive Bayes']
SGD = ['SGD']
LoR = ['Logistic Regression']
svc = ['SVC (Linear SVM)']
RF= ['Random Forest']

"""#Implementing pipelines for MNB, SGD, Logistic Reg, SVC

#Train, Test, Split
"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(input_data, class_labels, test_size=0.3, random_state = 0)

from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import accuracy_score

from sklearn.naive_bayes import MultinomialNB

nb = Pipeline([('tfidf_vect', TfidfVectorizer()),
               ('clf', MultinomialNB())
               ])
nb.fit(X_train, y_train)
y_pred_mnb = nb.predict(X_test)
#print('accuracy %s' % accuracy_score(y_pred_mnb, y_test))
MNB.append(accuracy_score(y_pred_mnb, y_test))

from sklearn.linear_model import SGDClassifier

sgd = Pipeline([('tfidf_vect', TfidfVectorizer()),
                ('clf', SGDClassifier(loss='hinge', penalty='l2',alpha=1e-3, random_state=42, max_iter=5, tol=None)),
               ])
sgd.fit(X_train, y_train)
y_pred_sgd = sgd.predict(X_test)
#print('accuracy %s' % accuracy_score(y_pred_sgd, y_test))
SGD.append(accuracy_score(y_pred_sgd, y_test))

from sklearn.linear_model import LogisticRegression

logreg = Pipeline([('tfidf_vect', TfidfVectorizer()),
                ('clf', LogisticRegression(n_jobs=1, C=1e5)),
               ])
logreg.fit(X_train, y_train)
y_pred_logistic = logreg.predict(X_test)
#print('accuracy %s' % accuracy_score(y_pred_logistic, y_test))
LoR.append(accuracy_score(y_pred_logistic, y_test))

from sklearn.svm import SVC, LinearSVC

LinSVC = Pipeline([('tfidf_vect', TfidfVectorizer()),
                ('clf', LinearSVC(loss='hinge', C=5, random_state=42))])
LinSVC.fit(X_train, y_train)
y_pred_LinSVC = LinSVC.predict(X_test)
#print('accuracy %s' % accuracy_score(y_pred_LinSVC, y_test))
svc.append(accuracy_score(y_pred_LinSVC, y_test))

from sklearn import model_selection
from sklearn.ensemble import RandomForestClassifier
# random forest model creation
rfc = Pipeline([('tfidf_vect', TfidfVectorizer()),
                ('clf', RandomForestClassifier())])
#rfc = RandomForestClassifier()
rfc.fit(X_train,y_train)
# predictions
rfc_predict = rfc.predict(X_test)
RF.append(accuracy_score(rfc_predict, y_test))

"""#Cross Validation 5"""

from sklearn.model_selection import KFold

kfold = KFold(5, True, 1)
mnb_acc=[]
sgd_acc=[]
log_acc=[]
svc_acc=[]
rf_acc = []

for train_index, test_index in kfold.split(input_data):
  X_train, X_test = input_data[train_index], input_data[test_index] 
  y_train, y_test = class_labels[train_index], class_labels[test_index]

  nb.fit(X_train, y_train)
  y_pred_mnb = nb.predict(X_test)
  #print('accuracy of Naive Bayes %s' % accuracy_score(y_pred_mnb, y_test))
  mnb_acc.append(accuracy_score(y_pred_mnb, y_test))

  sgd.fit(X_train, y_train)
  y_pred_sgd = sgd.predict(X_test)
  #print('accuracy of SGD %s' % accuracy_score(y_pred_sgd, y_test))
  sgd_acc.append(accuracy_score(y_pred_sgd, y_test))

  logreg.fit(X_train, y_train)
  y_pred_logistic = logreg.predict(X_test)
  #print('accuracy of Logistic %s' % accuracy_score(y_pred_logistic, y_test))
  log_acc.append(accuracy_score(y_pred_logistic, y_test))

  LinSVC.fit(X_train, y_train)
  y_pred_LinSVC = LinSVC.predict(X_test)
  #print('accuracy %s' % accuracy_score(y_pred_LinSVC, y_test))
  svc_acc.append(accuracy_score(y_pred_LinSVC, y_test))
  
  rfc.fit(X_train,y_train)
  rfc_predict = rfc.predict(X_test)
  rf_acc.append(accuracy_score(rfc_predict, y_test))

#print("MNB Accuracy: "+str(sum(mnb_acc)/len(mnb_acc)))
MNB.append(sum(mnb_acc)/len(mnb_acc))
#print("SGD Accuracy: "+str(sum(sgd_acc)/len(sgd_acc)))
SGD.append(sum(sgd_acc)/len(sgd_acc))
#print("LoR Accuracy: "+str(sum(log_acc)/len(log_acc)))  
LoR.append(sum(log_acc)/len(log_acc))
#print("SVC Accuracy: "+str(sum(svc_acc)/len(svc_acc)))  
svc.append(sum(svc_acc)/len(svc_acc))
RF.append(sum(rf_acc)/len(rf_acc))

"""#Cross Validation 8"""

kfold = KFold(8, True, 1)
mnb_acc=[]
sgd_acc=[]
log_acc=[]
svc_acc=[]
rf_acc=[]

for train_index, test_index in kfold.split(input_data):
  X_train, X_test = input_data[train_index], input_data[test_index] 
  y_train, y_test = class_labels[train_index], class_labels[test_index]

  nb.fit(X_train, y_train)
  y_pred_mnb = nb.predict(X_test)
  #print('accuracy of Naive Bayes %s' % accuracy_score(y_pred_mnb, y_test))
  mnb_acc.append(accuracy_score(y_pred_mnb, y_test))

  sgd.fit(X_train, y_train)
  y_pred_sgd = sgd.predict(X_test)
  #print('accuracy of SGD %s' % accuracy_score(y_pred_sgd, y_test))
  sgd_acc.append(accuracy_score(y_pred_sgd, y_test))

  logreg.fit(X_train, y_train)
  y_pred_logistic = logreg.predict(X_test)
  #print('accuracy of Logistic %s' % accuracy_score(y_pred_logistic, y_test))
  log_acc.append(accuracy_score(y_pred_logistic, y_test))

  LinSVC.fit(X_train, y_train)
  y_pred_LinSVC = LinSVC.predict(X_test)
  #print('accuracy %s' % accuracy_score(y_pred_LinSVC, y_test))
  svc_acc.append(accuracy_score(y_pred_LinSVC, y_test))

  rfc.fit(X_train,y_train)
  rfc_predict = rfc.predict(X_test)
  rf_acc.append(accuracy_score(rfc_predict, y_test))
  

#print("MNB Accuracy: "+str(sum(mnb_acc)/len(mnb_acc)))
MNB.append(sum(mnb_acc)/len(mnb_acc))
#print("SGD Accuracy: "+str(sum(sgd_acc)/len(sgd_acc)))
SGD.append(sum(sgd_acc)/len(sgd_acc))
#print("LoR Accuracy: "+str(sum(log_acc)/len(log_acc)))  
LoR.append(sum(log_acc)/len(log_acc))
#print("SVC Accuracy: "+str(sum(svc_acc)/len(svc_acc)))  
svc.append(sum(svc_acc)/len(svc_acc))
RF.append(sum(rf_acc)/len(rf_acc))

"""#Cross Validation 10"""

kfold = KFold(10, True, 1)
mnb_acc=[]
sgd_acc=[]
log_acc=[]
svc_acc=[]
rf_acc=[]

for train_index, test_index in kfold.split(input_data):
  X_train, X_test = input_data[train_index], input_data[test_index] 
  y_train, y_test = class_labels[train_index], class_labels[test_index]

  nb.fit(X_train, y_train)
  y_pred_mnb = nb.predict(X_test)
  #print('accuracy of Naive Bayes %s' % accuracy_score(y_pred_mnb, y_test))
  mnb_acc.append(accuracy_score(y_pred_mnb, y_test))

  sgd.fit(X_train, y_train)
  y_pred_sgd = sgd.predict(X_test)
  #print('accuracy of SGD %s' % accuracy_score(y_pred_sgd, y_test))
  sgd_acc.append(accuracy_score(y_pred_sgd, y_test))

  logreg.fit(X_train, y_train)
  y_pred_logistic = logreg.predict(X_test)
  #print('accuracy of Logistic %s' % accuracy_score(y_pred_logistic, y_test))
  log_acc.append(accuracy_score(y_pred_logistic, y_test))

  LinSVC.fit(X_train, y_train)
  y_pred_LinSVC = LinSVC.predict(X_test)
  #print('accuracy %s' % accuracy_score(y_pred_LinSVC, y_test))
  svc_acc.append(accuracy_score(y_pred_LinSVC, y_test))
 
  rfc.fit(X_train,y_train)
  rfc_predict = rfc.predict(X_test)
  rf_acc.append(accuracy_score(rfc_predict, y_test))


#print("MNB Accuracy: "+str(sum(mnb_acc)/len(mnb_acc)))
MNB.append(sum(mnb_acc)/len(mnb_acc))
#print("SGD Accuracy: "+str(sum(sgd_acc)/len(sgd_acc)))
SGD.append(sum(sgd_acc)/len(sgd_acc))
#print("LoR Accuracy: "+str(sum(log_acc)/len(log_acc)))  
LoR.append(sum(log_acc)/len(log_acc))
#print("SVC Accuracy: "+str(sum(svc_acc)/len(svc_acc)))  
svc.append(sum(svc_acc)/len(svc_acc))
RF.append(sum(rf_acc)/len(rf_acc))

"""#Analysis of Accuracies"""

MNB = tuple(MNB)
SGD = tuple(SGD)
LoR = tuple(LoR)
svc = tuple(svc)
RF = tuple(RF)

final = pd.DataFrame([MNB,SGD,LoR,svc, RF], columns =['Model', 'TTS', 'CV-5', 'CV-8', 'CV-10']) 
final